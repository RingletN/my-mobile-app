import React, { useContext, useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Alert, useWindowDimensions, Modal, TextInput } from 'react-native';
import { AuthContext } from '../context/AuthContext';
import { Table, TableRow } from '../components/TableComponent';
// import Clipboard from '@react-native-clipboard/clipboard';
import * as Clipboard from 'expo-clipboard';

const StatsScreen = () => {
  const { moods, exportData, addMood, user } = useContext(AuthContext);
  const { width, height } = useWindowDimensions();
  const isLandscape = width > height;
  const [exportModalVisible, setExportModalVisible] = useState(false);
  const [importModalVisible, setImportModalVisible] = useState(false);
  const [exportedData, setExportedData] = useState('');
  const [importedJson, setImportedJson] = useState('');

  useEffect(() => {
    console.log('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ StatsScreen:', moods);
  }, [moods]);

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
  const sortedMoods = [...moods].sort((a, b) => new Date(b.date) - new Date(a.date));
  const moodStats = sortedMoods.reduce((acc, mood) => {
    const date = mood.date;
    if (!acc[date]) {
      acc[date] = { happy: 0, neutral: 0, sad: 0, angry: 0, tired: 0 };
    }
    if (mood.emoji === 'üòä') acc[date].happy++;
    else if (mood.emoji === 'üòê') acc[date].neutral++;
    else if (mood.emoji === 'üò¢') acc[date].sad++;
    else if (mood.emoji === 'üò°') acc[date].angry++;
    else if (mood.emoji === 'ü•±') acc[date].tired++;
    return acc;
  }, {});

  const handleExport = async () => {
    const data = await exportData();
    if (data.length > 0) {
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ id –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
      const filteredData = data.map(({ id, ...rest }) => rest);
      setExportedData(JSON.stringify(filteredData, null, 2));
      setExportModalVisible(true);
    } else {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    }
  };

//   const handleCopy = () => {
//     Clipboard.setString(exportedData);
//     Alert.alert('–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
//   };
const handleCopy = async () => {
    await Clipboard.setStringAsync(exportedData);
    Alert.alert('–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  };

  const handleImport = async () => {
    try {
      const parsedData = JSON.parse(importedJson);
      if (!Array.isArray(parsedData)) {
        throw new Error('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
      }
      for (const mood of parsedData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!mood.emoji || !mood.date) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç emoji –∏–ª–∏ date');
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º id –∏ userId —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await addMood({
          id: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id
          emoji: mood.emoji,
          note: mood.note || '',
          date: mood.date,
        });
      }
      setImportedJson('');
      setImportModalVisible(false);
      Alert.alert('–£—Å–ø–µ—Ö', '–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (e) {
      Alert.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${e.message}`);
    }
  };

  const getMaxValue = (stats) => Math.max(...Object.values(stats).filter(v => typeof v === 'number'));
  const normalizeValue = (value, max) => (max > 0 ? value / max : 0);

  return (
    <View style={[styles.container, isLandscape && styles.containerLandscape]}>
      <Text style={styles.title}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</Text>
      <TouchableOpacity style={styles.exportButton} onPress={handleExport}>
        <Text style={styles.exportText}>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.exportButton} onPress={() => setImportModalVisible(true)}>
        <Text style={styles.exportText}>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</Text>
      </TouchableOpacity>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={exportModalVisible}
        onRequestClose={() => setExportModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</Text>
            <TextInput
              style={styles.modalTextInput}
              value={exportedData}
              multiline
              editable={false}
              selectTextOnFocus={true}
            />
            <TouchableOpacity style={styles.copyButton} onPress={handleCopy}>
              <Text style={styles.buttonText}>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setExportModalVisible(false)}
            >
              <Text style={styles.buttonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={importModalVisible}
        onRequestClose={() => setImportModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</Text>
            <TextInput
              style={styles.modalTextInput}
              value={importedJson}
              onChangeText={setImportedJson}
              multiline
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON –¥–∞–Ω–Ω—ã–µ..."
              placeholderTextColor="#aaa"
            />
            <TouchableOpacity style={styles.importButton} onPress={handleImport}>
              <Text style={styles.buttonText}>–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setImportModalVisible(false)}
            >
              <Text style={styles.buttonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      <ScrollView horizontal style={styles.tableContainer}>
        <Table>
          <TableRow>
            <Text style={[styles.cell, styles.headerCell]}>–î–∞—Ç–∞</Text>
            <Text style={[styles.cell, styles.headerCell]}>üòä –†–∞–¥–æ—Å—Ç—å</Text>
            <Text style={[styles.cell, styles.headerCell]}>üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ</Text>
            <Text style={[styles.cell, styles.headerCell]}>üò¢ –ì—Ä—É—Å—Ç—å</Text>
            <Text style={[styles.cell, styles.headerCell]}>üò° –ó–ª–æ—Å—Ç—å</Text>
            <Text style={[styles.cell, styles.headerCell]}>ü•± –£—Å—Ç–∞–ª–æ—Å—Ç—å</Text>
          </TableRow>
          {Object.entries(moodStats).map(([date, stats]) => (
            <TableRow key={date}>
              <Text style={styles.cell}>{date}</Text>
              <Text style={styles.cell}>{stats.happy}</Text>
              <Text style={styles.cell}>{stats.neutral}</Text>
              <Text style={styles.cell}>{stats.sad}</Text>
              <Text style={styles.cell}>{stats.angry}</Text>
              <Text style={styles.cell}>{stats.tired}</Text>
            </TableRow>
          ))}
        </Table>
      </ScrollView>

      <ScrollView style={styles.chartContainer}>
        {Object.entries(moodStats).map(([date, stats]) => {
          const maxValue = getMaxValue(stats);
          return (
            <View key={date} style={[styles.chartRow, isLandscape && styles.chartRowLandscape]}>
              <Text style={[styles.chartLabel, isLandscape && styles.chartLabelLandscape]}>{date}</Text>
              <View style={[styles.barContainer, isLandscape && styles.barContainerLandscape]}>
                <View style={[styles.bar, { flex: normalizeValue(stats.happy, maxValue), backgroundColor: '#4CAF50' }]} />
                <View style={[styles.bar, { flex: normalizeValue(stats.neutral, maxValue), backgroundColor: '#FFC107' }]} />
                <View style={[styles.bar, { flex: normalizeValue(stats.sad, maxValue), backgroundColor: '#F44336' }]} />
                <View style={[styles.bar, { flex: normalizeValue(stats.angry, maxValue), backgroundColor: '#FF5722' }]} />
                <View style={[styles.bar, { flex: normalizeValue(stats.tired, maxValue), backgroundColor: '#9E9E9E' }]} />
              </View>
            </View>
          );
        })}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 15,
    backgroundColor: '#fff',
  },
  containerLandscape: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  exportButton: {
    backgroundColor: '#5770C5',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginBottom: 10,
  },
  exportText: {
    color: 'white',
    fontWeight: 'bold',
  },
  tableContainer: {
    marginBottom: 20,
  },
  cell: {
    padding: 10,
    minWidth: 80,
    textAlign: 'center',
  },
  headerCell: {
    fontWeight: 'bold',
    backgroundColor: '#f5f5f5',
  },
  chartContainer: {
    marginTop: 20,
  },
  chartRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  chartRowLandscape: {
    flexDirection: 'column',
    flex: 1,
    marginHorizontal: 10,
  },
  chartLabel: {
    width: 80,
    fontSize: 12,
  },
  chartLabelLandscape: {
    width: '100%',
    textAlign: 'center',
    marginBottom: 5,
  },
  barContainer: {
    flexDirection: 'row',
    height: 20,
    flex: 1,
  },
  barContainerLandscape: {
    flexDirection: 'column',
    height: 100,
  },
  bar: {
    height: '100%',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    width: '80%',
    maxHeight: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  modalTextInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 10,
    minHeight: 100,
    maxHeight: 300,
    fontSize: 14,
    color: '#333',
  },
  copyButton: {
    backgroundColor: '#4CAF50',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  importButton: {
    backgroundColor: '#5770C5',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  closeButton: {
    backgroundColor: '#ff4444',
    padding: 10,
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});

export default StatsScreen;