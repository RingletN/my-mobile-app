import React, { createContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [moods, setMoods] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const initializeTestData = async (userId) => {
    try {
      await AsyncStorage.clear();
      
      const moodsData = await AsyncStorage.getItem('userMoods');
      const existingMoods = moodsData ? JSON.parse(moodsData) : [];
      const userMoods = existingMoods.filter(m => m.userId === userId);

      if (userMoods.length === 0) {
        const testMoods = [
          { id: Date.now() - 86400000 * 2, emoji: 'üòä', note: '–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å!', date: '11.06.2025', userId },
          { id: Date.now() - 86400000 * 1, emoji: 'üòê', note: '–°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω—å', date: '12.06.2025', userId },
          { id: Date.now(), emoji: 'üò¢', note: '–ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', date: '13.06.2025', userId },
        ];
        const updatedMoods = [...existingMoods, ...testMoods];
        await AsyncStorage.setItem('userMoods', JSON.stringify(updatedMoods));
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è userId:', userId, updatedMoods);
        setMoods(testMoods); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } else {
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:', userMoods);
        setMoods(userMoods); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    const loadData = async () => {
      try {
        const userData = await AsyncStorage.getItem('currentUser');
        if (userData) {
          const parsedUser = JSON.parse(userData);
          setUser(parsedUser);
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const moodsData = await AsyncStorage.getItem('userMoods');
          if (moodsData) {
            const parsedMoods = JSON.parse(moodsData);
            const userMoods = parsedMoods.filter(m => m.userId === parsedUser.id);
            setMoods(userMoods);
          }
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, []); // –ü—É—Å—Ç–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  const register = async (name, email, password) => {
    try {
      const usersData = await AsyncStorage.getItem('users');
      const users = usersData ? JSON.parse(usersData) : [];
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!re.test(String(email).toLowerCase())) {
        return { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' };
      }
      if (users.some(u => u.email === email)) {
        return { success: false, error: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' };
      }

      const newUser = { id: Date.now(), name, email, password };
      const updatedUsers = [...users, newUser];
      await AsyncStorage.setItem('users', JSON.stringify(updatedUsers));
      await AsyncStorage.setItem('currentUser', JSON.stringify(newUser));
      setUser(newUser);
      await initializeTestData(newUser.id); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
    }
  };

  // –í—Ö–æ–¥
  const login = async (email, password, rememberMe) => {
    try {
      const usersData = await AsyncStorage.getItem('users');
      const users = usersData ? JSON.parse(usersData) : [];
      const foundUser = users.find(u => u.email === email && u.password === password);
      if (!foundUser) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' };
      }
      await AsyncStorage.setItem('currentUser', JSON.stringify(foundUser));
      await AsyncStorage.setItem('rememberMe', rememberMe.toString());
      setUser(foundUser);
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –≤–æ—à–µ–¥—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const moodsData = await AsyncStorage.getItem('userMoods');
      if (moodsData) {
        const parsedMoods = JSON.parse(moodsData);
        const userMoods = parsedMoods.filter(m => m.userId === foundUser.id);
        setMoods(userMoods);
      }
      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' };
    }
  };

  // –í—ã—Ö–æ–¥
  const logout = async () => {
    try {
      await AsyncStorage.removeItem('currentUser');
      await AsyncStorage.setItem('rememberMe', 'false');
      setUser(null);
      setMoods([]); // –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', e);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const addMood = async (newMood) => {
    try {
      const moodWithUser = { ...newMood, userId: user?.id };
      const moodsData = await AsyncStorage.getItem('userMoods');
      const existingMoods = moodsData ? JSON.parse(moodsData) : [];
      const updatedMoods = [...existingMoods, moodWithUser];
      await AsyncStorage.setItem('userMoods', JSON.stringify(updatedMoods));
      setMoods(prevMoods => [...prevMoods, moodWithUser]); // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', e);
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
  const exportData = async () => {
    try {
      const moodsData = await AsyncStorage.getItem('userMoods');
      const userMoods = moodsData ? JSON.parse(moodsData).filter(mood => mood.userId === user?.id) : [];
      console.log('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', userMoods);
      return userMoods;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', e);
      return [];
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        moods,
        isLoading,
        register,
        login,
        logout,
        addMood,
        exportData,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};