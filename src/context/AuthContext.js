// AuthContext.js
import React, { createContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [moods, setMoods] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [quote, setQuote] = useState(''); // –¢–µ–∫—É—â–∞—è —Ü–∏—Ç–∞—Ç–∞
  const [isQuoteLoading, setIsQuoteLoading] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [quoteError, setQuoteError] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  const [cachedQuotes, setCachedQuotes] = useState([]); // –ö—ç—à —Ü–∏—Ç–∞—Ç

  // –ë–∞–∑–æ–≤—ã–π URL –±–µ–∑ –∫–ª—é—á–∞
  const ZENQUOTES_URL = 'https://zenquotes.io/api/quotes/';

  const initializeTestData = async (userId) => {
    try {
      const moodsData = await AsyncStorage.getItem('userMoods');
      const existingMoods = moodsData ? JSON.parse(moodsData) : [];
      const userMoods = existingMoods.filter(m => m.userId === userId);

      if (userMoods.length === 0) {
        const testMoods = [
          { id: Date.now() - 86400000 * 2, emoji: 'üòä', note: '–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å!', date: '11.06.2025', time: '09:00', userId },
          { id: Date.now() - 86400000 * 1, emoji: 'üòê', note: '–°—Ä–µ–¥–Ω–∏–π –¥–µ–Ω—å', date: '12.06.2025', time: '14:30', userId },
          { id: Date.now(), emoji: 'üò¢', note: '–ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', date: '13.06.2025', time: '18:45', userId },
        ];
        const updatedMoods = [...existingMoods, ...testMoods];
        await AsyncStorage.setItem('userMoods', JSON.stringify(updatedMoods));
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è userId:', userId, updatedMoods);
        setMoods(testMoods);
      } else {
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:', userMoods);
        setMoods(userMoods);
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
    }
  };

  useEffect(() => {
    const loadData = async () => {
      try {
        const userData = await AsyncStorage.getItem('currentUser');
        if (userData) {
          const parsedUser = JSON.parse(userData);
          setUser(parsedUser);
          const moodsData = await AsyncStorage.getItem('userMoods');
          if (moodsData) {
            let parsedMoods = JSON.parse(moodsData);
            parsedMoods = parsedMoods.map(mood => ({
              ...mood,
              time: mood.time || '00:00',
            }));
            await AsyncStorage.setItem('userMoods', JSON.stringify(parsedMoods));
            const userMoods = parsedMoods.filter(m => m.userId === parsedUser.id);
            setMoods(userMoods);
          }
        }
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —Ü–∏—Ç–∞—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        const cachedData = await AsyncStorage.getItem('cachedQuotes');
        if (cachedData) {
          const parsedQuotes = JSON.parse(cachedData);
          setCachedQuotes(parsedQuotes);
          setQuote(parsedQuotes[0]?.q || ''); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫—ç—à–∞
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
      } finally {
        setIsLoading(false);
      }
    };
    loadData();
  }, []);

  useEffect(() => {
    if (user) {
      const loadUserMoods = async () => {
        try {
          const moodsData = await AsyncStorage.getItem('userMoods');
          if (moodsData) {
            const parsedMoods = JSON.parse(moodsData);
            const userMoods = parsedMoods.filter(m => m.userId === user.id);
            setMoods(userMoods);
          } else {
            setMoods([]);
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:', e);
        }
      };
      loadUserMoods();
    } else {
      setMoods([]);
    }
  }, [user]);

  useEffect(() => {
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ä–∞–∑ –≤ —á–∞—Å (3600000 –º—Å)
    const interval = setInterval(() => {
      fetchRandomQuote(true); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    }, 3600000);

    // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
    fetchRandomQuote(true);

    return () => clearInterval(interval); // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, []);

  const register = async (name, email, password) => {
    try {
      const usersData = await AsyncStorage.getItem('users');
      const users = usersData ? JSON.parse(usersData) : [];
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!re.test(String(email).toLowerCase())) {
        return { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' };
      }
      if (users.some(u => u.email === email)) {
        return { success: false, error: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' };
      }
      const newUser = { id: Date.now(), name, email, password };
      const updatedUsers = [...users, newUser];
      await AsyncStorage.setItem('users', JSON.stringify(updatedUsers));
      await AsyncStorage.setItem('currentUser', JSON.stringify(newUser));
      setUser(newUser);
      await initializeTestData(newUser.id);
      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' };
    }
  };

  const login = async (email, password, rememberMe) => {
    try {
      const usersData = await AsyncStorage.getItem('users');
      const users = usersData ? JSON.parse(usersData) : [];
      const foundUser = users.find(u => u.email === email && u.password === password);
      if (!foundUser) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' };
      }
      await AsyncStorage.setItem('currentUser', JSON.stringify(foundUser));
      await AsyncStorage.setItem('rememberMe', rememberMe.toString());
      setUser(foundUser);
      const moodsData = await AsyncStorage.getItem('userMoods');
      if (moodsData) {
        const parsedMoods = JSON.parse(moodsData);
        const userMoods = parsedMoods.filter(m => m.userId === foundUser.id);
        setMoods(userMoods);
      }
      return { success: true };
    } catch (error) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' };
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem('currentUser');
      await AsyncStorage.setItem('rememberMe', 'false');
      setUser(null);
      setMoods([]);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', e);
    }
  };

  const addMood = async (newMood) => {
    try {
      const moodWithUser = { ...newMood, userId: user?.id };
      const moodsData = await AsyncStorage.getItem('userMoods');
      const existingMoods = moodsData ? JSON.parse(moodsData) : [];
      const updatedMoods = [...existingMoods, moodWithUser];
      await AsyncStorage.setItem('userMoods', JSON.stringify(updatedMoods));
      setMoods(prevMoods => [...prevMoods, moodWithUser]);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', e);
    }
  };

  const exportData = async () => {
    try {
      const moodsData = await AsyncStorage.getItem('userMoods');
      const userMoods = moodsData ? JSON.parse(moodsData).filter(mood => mood.userId === user?.id) : [];
      console.log('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', userMoods);
      return userMoods;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', e);
      return [];
    }
  };

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const fetchRandomQuote = async (updateCache = false) => {
    setIsQuoteLoading(true);
    setQuoteError(null);
    try {
      let newQuote = '';
      if (!updateCache && cachedQuotes.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        const randomIndex = Math.floor(Math.random() * cachedQuotes.length);
        newQuote = cachedQuotes[randomIndex].q;
      } else {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
        const response = await fetch(ZENQUOTES_URL);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç API:', data); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (data && data.length > 0) {
          newQuote = data[0].q;
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          const updatedQuotes = [...data].slice(0, 10); // –•—Ä–∞–Ω–∏–º –¥–æ 10 —Ü–∏—Ç–∞—Ç
          setCachedQuotes(updatedQuotes);
          await AsyncStorage.setItem('cachedQuotes', JSON.stringify(updatedQuotes));
        } else {
          throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API');
        }
      }
      setQuote(newQuote); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
      return newQuote;
    } catch (err) {
      setQuoteError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã: ${err.message}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω.`);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã:', err);
      // –ï—Å–ª–∏ –∫—ç—à –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (cachedQuotes.length > 0) {
        const randomIndex = Math.floor(Math.random() * cachedQuotes.length);
        setQuote(cachedQuotes[randomIndex].q);
        return cachedQuotes[randomIndex].q;
      }
      return null;
    } finally {
      setIsQuoteLoading(false);
    }
  };

  const value = {
    user,
    moods,
    isLoading,
    register,
    login,
    logout,
    addMood,
    exportData,
    quote, // –¢–µ–∫—É—â–∞—è —Ü–∏—Ç–∞—Ç–∞
    isQuoteLoading, // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    quoteError, // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    fetchRandomQuote, // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};